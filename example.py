import hashlib
from datetime import datetime, timedelta
import telebot

TOKEN = "8397224957:AAEKkBLFe101QNElIoLkwhg05dHnbmateD4"
bot = telebot.TeleBot(TOKEN)

login = "leo_zzz"
password = "uniz12345"

# —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (—Ç–≤–æ—è –ª–æ–≥–∏–∫–∞)
# -----------------------------
def generate_adb_password(vin, custom_time=None, use_previous_interval=False):
    interval_ms = 600000  # 10 –º–∏–Ω—É—Ç
    if custom_time:
        dt = datetime.strptime(custom_time, "%Y-%m-%d %H:%M")
        current_time = int(dt.timestamp() * 1000)
    else:
        current_time = int(datetime.now().timestamp() * 1000)

    if use_previous_interval:
        current_time += interval_ms

    if len(vin) < 6:
        return "error: vin length < 6"

    vin_suffix = vin[-6:]
    time_interval = current_time // interval_ms
    base_string = f"{vin_suffix}&&{time_interval}#"

    sha256_hash = hashlib.sha256(base_string.encode("utf-8")).hexdigest().upper()
    md5_hash = hashlib.md5(sha256_hash.encode("utf-8")).hexdigest()
    return md5_hash[-6:] if len(md5_hash) >= 6 else md5_hash


def get_passwords_for_time(vin, custom_time):
    return {
        "custom_time": custom_time,
        "passwords": [
            generate_adb_password(vin, custom_time),
            generate_adb_password(vin, custom_time, use_previous_interval=True)
        ],
        "time_info": {
            "current_interval_start": datetime.strptime(custom_time, "%Y-%m-%d %H:%M").strftime("%Y-%m-%d %H:%M:%S"),
            "previous_interval_start": (
                datetime.strptime(custom_time, "%Y-%m-%d %H:%M") + timedelta(minutes=10)
            ).strftime("%Y-%m-%d %H:%M:%S")
        }
    }

# -----------------------------
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
# -----------------------------
@bot.message_handler(commands=['start', 'reset'])
def start_handler(message):
    user_id = message.from_user.id
    user_state[user_id] = "awaiting_login"
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –®–∞–≥ 1 ‚Äî –ª–æ–≥–∏–Ω
    if user_id in user_state and user_state[user_id] == "awaiting_login":
        if text == login:
            user_state[user_id] = "awaiting_password"
            bot.reply_to(message, "‚úÖ –õ–æ–≥–∏–Ω –≤–µ—Ä–Ω—ã–π.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –®–∞–≥ 2 ‚Äî –ø–∞—Ä–æ–ª—å
    if user_id in user_state and user_state[user_id] == "awaiting_password":
        if text == password:
            user_state[user_id] = "authorized"
            bot.reply_to(message, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ VIN (–º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤).")
        else:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –®–∞–≥ 3 ‚Äî –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    if user_id not in user_state or user_state[user_id] != "authorized":
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return

    # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Üí VIN
    vin = text
    if len(vin) < 6:
        bot.reply_to(message, "‚ùå VIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    current_time = datetime.now().strftime("%Y-%m-%d %H:%M")
    try:
        result = get_passwords_for_time(vin, current_time)
        msg = (
            f"üîπ VIN: {vin}\n"
            f"üïí –í—Ä–µ–º—è: {result['custom_time']}\n\n"
            f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {result['time_info']['current_interval_start']}\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {result['time_info']['previous_interval_start']}\n\n"
            f"üîê –ü–∞—Ä–æ–ª–∏:\n"

        )
        bot.reply_to(message, msg)
        bot.reply_to(f"1Ô∏è‚É£ {result['passwords'][0]}", msg)


    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


print("Bot is running...")
bot.infinity_polling()
